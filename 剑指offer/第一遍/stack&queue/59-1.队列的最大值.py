"""
题目一：滑动窗口的最大值

给定一个数组和滑动窗口的大小，请找出所有滑动窗口里的最大值。
例如，如果输入数组[2, 3, 4, 2, 6, 2, 5, 1]及滑动窗口的大小3，那么一共存在6个滑动窗口，它们的最大值分别为[4,4,6,6,6,5]

针对数组{2,3,4,2,6,2,5,1}的滑动窗口有以下6个：
{[2,3,4],2,6,2,5,1}， {2,[3,4,2],6,2,5,1}， {2,3,[4,2,6],2,5,1}， {2,3,4,[2,6,2],5,1}， {2,3,4,2,[6,2,5],1}， {2,3,4,2,6,[2,5,1]}。

"""


class Solution:
    def maxInWindows(self, num, size):
        """"
            num 数组
            size 滑动窗口大小

            我们把可能成为滑动窗口的最大值的数值下标存入一个两端开口的队列index中。
            首先遍历输入数组，在遍历次数小于窗口长度的时候，
            如果index数组里面含有元素而且元素后面的下标值对应的输入数组的数如果小于当前遍历到的输入数组元素值，那么就把尾部的元素下标值不断pop出来，再压入当前输入元素对应的下标值。
            然后再从等于滑动窗口大小的位置继续遍历输入数组。首先把index数组的头元素下标值对应输入数组值压入输出数组。
            同样的，如果index数组里面含有元素而且元素后面的下标值对应的输入数组的数如果小于当前遍历到的输入数组元素值，那么就把尾部的元素下标值不断pop出来，同时，如果index数组内有元素，而且当一个数字的下标与当前处理的数字的下标只差大于或等于滑动窗口的大小时，这个数字已经从窗口中画出，可以从队列中删除了，再压入当前输入元素对应的下标值。最后还需要在输出数组中append一下index手元素下标对应的输入元素值。

        """
        if not num or size <= 0:
            return []

        #
        deque = []
        # 当滑动窗口大小小于数组长度时
        if len(num) >= size:
            index = []  # index用来存储队列中的最大值的下标
            for i in range(size):
                # 首先要判断队列里是否有数字小于待存入的数字，如果有，则将该数字删除
                while len(index) > 0 and num[i] > num[index[-1]]:
                    index.pop()  # 删除队列的最后一个元素
                index.append(i)

            # 一个滑动窗口读取完毕

            for i in range(size, len(num)):
                deque.append(num[index[0]])  # 队列的最大值
                # 如果下一个数字比上一个数字的值大，则将原来的最大值删除
                while len(index) > 0 and num[i] >= num[index[-1]]:
                    index.pop()

                # 如果滑动窗口已经不包含第一个数字
                if len(index) > 0 and i - index[0] >= size:
                    index.pop(0)

                index.append(i)

            deque.append(num[index[0]])

        return deque


if __name__ == '__main__':
    num = [2, 3, 4, 2, 6, 2, 5, 1]
    size = 3
    res = Solution().maxInWindows(num, size)
    print(res)
